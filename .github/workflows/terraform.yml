# .github/workflows/terraform.yml

name: Terraform Infrastructure

on:
  push:
    branches:
      - main
    paths:
      - 'infrastructure/**' # Trigger only on changes within the infrastructure directory

jobs:
  terraform:
    name: 'Terraform Checks and Apply'
    runs-on: ubuntu-latest

    # Define environment variables for secrets used by Terraform providers and backend
    env:
      # Terraform Cloud API Token for backend authentication
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

      # Cloud Provider Credentials (use the ones relevant to your infrastructure)
      # Example for AWS:
      # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      # AWS_REGION: 'us-east-1' # Or your default region

      # Example for GCP:
      # GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }} # JSON string of service account key

      # Example for Azure:
      # ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      # ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      # ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      # ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          # Optionally specify a Terraform version, e.g., terraform_version: 1.5.0
          # Make sure it matches your required_version in main.tf
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }} # Use token for Terraform Cloud login

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -recursive infrastructure/

      - name: Terraform Init
        id: init
        run: terraform init -backend=true infrastructure/

      - name: Terraform Validate
        id: validate
        run: terraform validate infrastructure/

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color infrastructure/ -out=tfplan

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan
          retention-days: 5

  terraform_apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform # Depends on the 'terraform' job completing successfully

    # Require manual approval and run in the 'production' environment
    environment:
      name: production
      url: https://github.com/${{ github.repository }} # Link to the repo or deployed infra dashboard

    # Define environment variables for secrets needed during apply
    env:
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      # Include cloud provider credentials again if needed by the apply step itself
      # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      # GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
      # etc.

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: .

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init (for Apply)
        id: init_apply
        run: terraform init -backend=true infrastructure/

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve tfplan
